// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: odpf/assets/topic.proto

package assets

import (
	common "github.com/odpf/meteor/models/odpf/assets/common"
	facets "github.com/odpf/meteor/models/odpf/assets/facets"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Topic is resource that represents a logical group of messages
// in message bus like kafka, pubsub, pulsar etc.
type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Representation of the resource
	Resource *common.Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// The metrics of the topic.
	// For an example check out topic profile schema.
	Profile *TopicProfile `protobuf:"bytes,21,opt,name=profile,proto3" json:"profile,omitempty"`
	// The schama of the topic.
	// For an example check out topic schema.
	Schema *facets.TopicSchema `protobuf:"bytes,31,opt,name=schema,proto3" json:"schema,omitempty"`
	// The ownership of the topic.
	// For an example check out ownership.
	Ownership *facets.Ownership `protobuf:"bytes,32,opt,name=ownership,proto3" json:"ownership,omitempty"`
	// The lineage of the topic.
	// For an example check out lineage schema.
	Lineage *facets.Lineage `protobuf:"bytes,33,opt,name=lineage,proto3" json:"lineage,omitempty"`
	// List of the user's custom properties.
	// Properties facet can be used to set custom properties, tags and labels for a user.
	Properties *facets.Properties `protobuf:"bytes,34,opt,name=properties,proto3" json:"properties,omitempty"`
	// The timestamp of the user's creation.
	// Timstamp facet can be used to set the creation and updation timestamp of a user.
	Timestamps *common.Timestamp `protobuf:"bytes,35,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	// The timestamp of the generated event.
	// Event schemas is defined in the common event schema.
	Event *common.Event `protobuf:"bytes,100,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_odpf_assets_topic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_odpf_assets_topic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_odpf_assets_topic_proto_rawDescGZIP(), []int{0}
}

func (x *Topic) GetResource() *common.Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Topic) GetProfile() *TopicProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Topic) GetSchema() *facets.TopicSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Topic) GetOwnership() *facets.Ownership {
	if x != nil {
		return x.Ownership
	}
	return nil
}

func (x *Topic) GetLineage() *facets.Lineage {
	if x != nil {
		return x.Lineage
	}
	return nil
}

func (x *Topic) GetProperties() *facets.Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Topic) GetTimestamps() *common.Timestamp {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Topic) GetEvent() *common.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// TopicProfile is the profile of the topic.
type TopicProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The thrroughput of the topic.
	// Example: `1m/minute`.
	Throughput string `protobuf:"bytes,1,opt,name=throughput,proto3" json:"throughput,omitempty"`
	// The number of partitions in the topic.
	// Example: `12`.
	NumberOfPartitions int64 `protobuf:"varint,2,opt,name=number_of_partitions,json=numberOfPartitions,proto3" json:"number_of_partitions,omitempty"`
}

func (x *TopicProfile) Reset() {
	*x = TopicProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_odpf_assets_topic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicProfile) ProtoMessage() {}

func (x *TopicProfile) ProtoReflect() protoreflect.Message {
	mi := &file_odpf_assets_topic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicProfile.ProtoReflect.Descriptor instead.
func (*TopicProfile) Descriptor() ([]byte, []int) {
	return file_odpf_assets_topic_proto_rawDescGZIP(), []int{1}
}

func (x *TopicProfile) GetThroughput() string {
	if x != nil {
		return x.Throughput
	}
	return ""
}

func (x *TopicProfile) GetNumberOfPartitions() int64 {
	if x != nil {
		return x.NumberOfPartitions
	}
	return 0
}

var File_odpf_assets_topic_proto protoreflect.FileDescriptor

var file_odpf_assets_topic_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6f, 0x64, 0x70, 0x66, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6f, 0x64, 0x70, 0x66, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x1f, 0x6f, 0x64, 0x70, 0x66, 0x2f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6f, 0x64, 0x70, 0x66, 0x2f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x2f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6f, 0x64, 0x70,
	0x66, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x2f,
	0x6c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6f,
	0x64, 0x70, 0x66, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x66, 0x61, 0x63, 0x65, 0x74,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x6f, 0x64, 0x70, 0x66, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6f, 0x64, 0x70, 0x66, 0x2f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6f, 0x64, 0x70, 0x66, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x03, 0x0a, 0x05, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3b, 0x0a, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x66, 0x61, 0x63,
	0x65, 0x74, 0x73, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x64, 0x70, 0x66,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65, 0x12,
	0x3e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x2f,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x64, 0x70, 0x66, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x60, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x3b, 0x0a, 0x0e, 0x69, 0x6f, 0x2e, 0x6f, 0x64, 0x70, 0x66, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x42, 0x0a, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a,
	0x1d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x64, 0x70, 0x66,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_odpf_assets_topic_proto_rawDescOnce sync.Once
	file_odpf_assets_topic_proto_rawDescData = file_odpf_assets_topic_proto_rawDesc
)

func file_odpf_assets_topic_proto_rawDescGZIP() []byte {
	file_odpf_assets_topic_proto_rawDescOnce.Do(func() {
		file_odpf_assets_topic_proto_rawDescData = protoimpl.X.CompressGZIP(file_odpf_assets_topic_proto_rawDescData)
	})
	return file_odpf_assets_topic_proto_rawDescData
}

var file_odpf_assets_topic_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_odpf_assets_topic_proto_goTypes = []interface{}{
	(*Topic)(nil),              // 0: odpf.assets.Topic
	(*TopicProfile)(nil),       // 1: odpf.assets.TopicProfile
	(*common.Resource)(nil),    // 2: odpf.assets.common.Resource
	(*facets.TopicSchema)(nil), // 3: odpf.assets.facets.TopicSchema
	(*facets.Ownership)(nil),   // 4: odpf.assets.facets.Ownership
	(*facets.Lineage)(nil),     // 5: odpf.assets.facets.Lineage
	(*facets.Properties)(nil),  // 6: odpf.assets.facets.Properties
	(*common.Timestamp)(nil),   // 7: odpf.assets.common.Timestamp
	(*common.Event)(nil),       // 8: odpf.assets.common.Event
}
var file_odpf_assets_topic_proto_depIdxs = []int32{
	2, // 0: odpf.assets.Topic.resource:type_name -> odpf.assets.common.Resource
	1, // 1: odpf.assets.Topic.profile:type_name -> odpf.assets.TopicProfile
	3, // 2: odpf.assets.Topic.schema:type_name -> odpf.assets.facets.TopicSchema
	4, // 3: odpf.assets.Topic.ownership:type_name -> odpf.assets.facets.Ownership
	5, // 4: odpf.assets.Topic.lineage:type_name -> odpf.assets.facets.Lineage
	6, // 5: odpf.assets.Topic.properties:type_name -> odpf.assets.facets.Properties
	7, // 6: odpf.assets.Topic.timestamps:type_name -> odpf.assets.common.Timestamp
	8, // 7: odpf.assets.Topic.event:type_name -> odpf.assets.common.Event
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_odpf_assets_topic_proto_init() }
func file_odpf_assets_topic_proto_init() {
	if File_odpf_assets_topic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_odpf_assets_topic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_odpf_assets_topic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_odpf_assets_topic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_odpf_assets_topic_proto_goTypes,
		DependencyIndexes: file_odpf_assets_topic_proto_depIdxs,
		MessageInfos:      file_odpf_assets_topic_proto_msgTypes,
	}.Build()
	File_odpf_assets_topic_proto = out.File
	file_odpf_assets_topic_proto_rawDesc = nil
	file_odpf_assets_topic_proto_goTypes = nil
	file_odpf_assets_topic_proto_depIdxs = nil
}
